{"version":3,"sources":["../../services/UserService.js"],"names":["database","require","UserService","User_Info","findAll","newUser","create","id","updateUser","findOne","where","emp_uid","UserToUpdate","update","Number","theUser","emp_role","UserToDelete","destroy","deletedUser"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;IACOC,W;;;;;;;;;;;;;;;;;;;uBAGYF,QAAQ,CAACG,SAAT,CAAmBC,OAAnB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMIC,O;;;;;;;uBAEJL,QAAQ,CAACG,SAAT,CAAmBG,MAAnB,CAA0BD,OAA1B,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMOE,E,EAAIC,W;;;;;;;;uBAEGR,QAAQ,CAACG,SAAT,CAAmBM,OAAnB,CAA2B;AACpDC,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,OAAO,EAAEJ;AAAX;AAD6C,iBAA3B,C;;;AAArBK,gBAAAA,Y;;qBAIFA,Y;;;;;;uBACIZ,QAAQ,CAACG,SAAT,CAAmBU,MAAnB,CAA0BL,WAA1B,EAAsC;AAAEE,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,OAAO,EAAEG,MAAM,CAACP,EAAD;AAAjB;AAAT,iBAAtC,C;;;kDAECC,W;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMWD,E;;;;;;;;uBAEIP,QAAQ,CAACG,SAAT,CAAmBM,OAAnB,CAA2B;AAC/CC,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,OAAO,EAAEJ;AAAX;AADwC,iBAA3B,C;;;AAAhBQ,gBAAAA,O;kDAICA,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOef,QAAQ,CAACG,SAAT,CAAmBC,OAAnB,CAA2B;AAC/CM,kBAAAA,KAAK,EAAE;AAAEM,oBAAAA,QAAQ,EAAE;AAAZ;AADwC,iBAA3B,C;;;AAAhBD,gBAAAA,O;kDAICA,O;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMaR,E;;;;;;;;uBAEOP,QAAQ,CAACG,SAAT,CAAmBM,OAAnB,CAA2B;AAAEC,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,OAAO,EAAEG,MAAM,CAACP,EAAD;AAAjB;AAAT,iBAA3B,C;;;AAArBU,gBAAAA,Y;;qBAEFA,Y;;;;;;uBACwBjB,QAAQ,CAACG,SAAT,CAAmBe,OAAnB,CAA2B;AACnDR,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,OAAO,EAAEJ;AAAX;AAD4C,iBAA3B,C;;;AAApBY,gBAAAA,W;kDAGCA,W;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;eAMEjB,W","sourcesContent":["// import database from '../src/models';\nvar database = require('../models');\n class UserService {\n  static async getAllUsers() {\n    try {\n      return await database.User_Info.findAll();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async addUser(newUser) {\n    try {\n      return await database.User_Info.create(newUser);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async updateUser(id, updateUser) {\n    try {\n      const UserToUpdate = await database.User_Info.findOne({\n        where: { emp_uid: id }\n      });\n\n      if (UserToUpdate) {\n        await database.User_Info.update(updateUser, { where: { emp_uid: Number(id) } });\n\n        return updateUser;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async getAUser(id) {\n    try {\n      const theUser = await database.User_Info.findOne({\n        where: { emp_uid: id }\n      });\n\n      return theUser;\n    } catch (error) {\n      throw error;\n    }\n  }\n  static async getManagers() {\n    try {\n      const theUser = await database.User_Info.findAll({\n        where: { emp_role: 'manager' }\n      });\n\n      return theUser;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async deleteUser(id) {\n    try {\n      const UserToDelete = await database.User_Info.findOne({ where: { emp_uid: Number(id) } });\n\n      if (UserToDelete) {\n        const deletedUser = await database.User_Info.destroy({\n          where: { emp_uid: id }\n        });\n        return deletedUser;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\nexport default UserService;\n"],"file":"UserService.js"}