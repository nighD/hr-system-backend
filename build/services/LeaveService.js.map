{"version":3,"sources":["../../services/LeaveService.js"],"names":["database","require","LeaveService","Leaves","findAll","newLeave","console","log","create","LeaveSetting","newLeaveSetting","findOne","where","id","LeaveToDelete","truncate","restartIdentity","updateLeave","LeaveToUpdate","update","updateUser","emp_uid","theLeave","status","String","charAt","toUpperCase","slice","destroy","deletedLeave"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;IACOC,Y;;;;;;;;;;;;;;;;;;;uBAGYF,QAAQ,CAACG,MAAT,CAAgBC,OAAhB,CAAwB,EAAxB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAQKC,Q;;;;;AACpBC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;;uBAEeL,QAAQ,CAACG,MAAT,CAAgBK,MAAhB,CAAuBH,QAAvB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAOAL,QAAQ,CAACS,YAAT,CAAsBL,OAAtB,CAA8B,EAA9B,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAOYM,e;;;;;;AAC3BJ,gBAAAA,OAAO,CAACC,GAAR,CAAYG,eAAZ;;;uBAEgCV,QAAQ,CAACS,YAAT,CAAsBE,OAAtB,CAA8B;AAAEC,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,EAAE,EAAE;AAAN;AAAT,iBAA9B,C;;;AAAtBC,gBAAAA,a;;qBACFA,a;;;;;;uBACId,QAAQ,CAACS,YAAT,CAAsBM,QAAtB,CAA+B;AACnCC,kBAAAA,eAAe,EAAE;AADkB,iBAA/B,C;;;;;;;;;;;;;;uBAQGhB,QAAQ,CAACS,YAAT,CAAsBD,MAAtB,CAA6BE,eAA7B,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKQG,E,EAAII,Y;;;;;;;;uBAEGjB,QAAQ,CAACG,MAAT,CAAgBQ,OAAhB,CAAwB;AAClDC,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,EAAE,EAAEA;AAAN;AAD2C,iBAAxB,C;;;AAAtBK,gBAAAA,a;;qBAIFA,a;;;;;;uBACIlB,QAAQ,CAACG,MAAT,CAAgBgB,MAAhB,CAAuBF,YAAvB,EAAoC;AAAEL,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,EAAE,EAAEA;AAAN;AAAT,iBAApC,C;;;kDAECO,U;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMYP,E;;;;;;;;uBAEIb,QAAQ,CAACG,MAAT,CAAgBC,OAAhB,CAAwB;AAC7CQ,kBAAAA,KAAK,EAAE;AAACS,oBAAAA,OAAO,EAAER;AAAV;AADsC,iBAAxB,C;;;AAAjBS,gBAAAA,Q;AAGNhB,gBAAAA,OAAO,CAACC,GAAR,CAAYe,QAAZ;kDAEOA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;qDAOkBC,M;;;;;;AAC3BA,gBAAAA,MAAM,GAAGC,MAAM,CAACD,MAAD,CAAN,CAAeE,MAAf,CAAsB,CAAtB,EAAyBC,WAAzB,KAAuCH,MAAM,CAACI,KAAP,CAAa,CAAb,CAAhD;;;uBAEuB3B,QAAQ,CAACG,MAAT,CAAgBC,OAAhB,CAAwB;AAC3CQ,kBAAAA,KAAK,EAAE;AAACW,oBAAAA,MAAM,EAAEA;AAAT;AADoC,iBAAxB,C;;;AAAjBD,gBAAAA,Q;kDAGGA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMcT,E;;;;;;;;uBAEOb,QAAQ,CAACG,MAAT,CAAgBQ,OAAhB,CAAwB;AAAEC,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,EAAE,EAAEA;AAAN;AAAT,iBAAxB,C;;;AAAtBC,gBAAAA,a;;qBAEFA,a;;;;;;uBACyBd,QAAQ,CAACG,MAAT,CAAgByB,OAAhB,CAAwB;AACjDhB,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,EAAE,EAAEA;AAAN;AAD0C,iBAAxB,C;;;AAArBgB,gBAAAA,Y;kDAGCA,Y;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;eAME3B,Y","sourcesContent":["// import database from '../src/models';\n// const User_Info = require('../models').User_Info;\nvar database = require('../models');\n class LeaveService {\n  static async getAllLeaves() {\n    try {\n      return await database.Leaves.findAll({\n\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async addLeave(newLeave) {\n    console.log(newLeave);\n    try {\n      return await database.Leaves.create(newLeave);\n    } catch (error) {\n      throw error;\n    }\n  }\n  static async getLeaveSetting() {\n    try {\n      return await database.LeaveSetting.findAll({\n\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n  static async addLeaveSetting(newLeaveSetting) {\n    console.log(newLeaveSetting);\n    try {\n        const LeaveToDelete = await database.LeaveSetting.findOne({ where: { id: 1 } });\n        if (LeaveToDelete) {\n          await database.LeaveSetting.truncate({\n            restartIdentity: true\n          });\n        }\n      } catch (error) {\n        throw error;\n      }\n    try {\n      return await database.LeaveSetting.create(newLeaveSetting);\n    } catch (error) {\n      throw error;\n    }\n  }\n  static async updateLeave(id, updateLeave) {\n    try {\n      const LeaveToUpdate = await database.Leaves.findOne({\n        where: { id: id }\n      });\n\n      if (LeaveToUpdate) {\n        await database.Leaves.update(updateLeave, { where: { id: id } });\n\n        return updateUser;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async getALeave(id) {\n    try {\n      const theLeave = await database.Leaves.findAll({\n        where: {emp_uid: id},\n      });\n      console.log(theLeave);\n\n      return theLeave;\n    } catch (error) {\n      throw error;\n    }\n  }\n  \n\n  static async getALeaveStatus(status) {\n    status = String(status).charAt(0).toUpperCase()+status.slice(1);\n    try {\n      let theLeave = await database.Leaves.findAll({\n        where: {status: status},\n      })\n      return theLeave;\n    } catch (error) {\n      throw error;\n    }\n  }  \n\n  static async deleteLeave(id) {\n    try {\n      const LeaveToDelete = await database.Leaves.findOne({ where: { id: id } });\n\n      if (LeaveToDelete) {\n        const deletedLeave = await database.Leaves.destroy({\n          where: { id: id }\n        });\n        return deletedLeave;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\nexport default LeaveService;\n"],"file":"LeaveService.js"}